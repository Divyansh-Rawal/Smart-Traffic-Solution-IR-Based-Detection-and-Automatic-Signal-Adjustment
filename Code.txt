// Define NOP assembly instruction for delay
#define NOP __asm__("nop")
// LED pattern
unsigned int pattern = 0b0001000100010010; // RED | RED | RED | GR
unsigned int maskPattern[4] = {0xFFF0, 0xFF0F, 0xF0FF, 0x0FFF};
// Sensor variables
int presentSensorId = 0; // Initial value
int nextSensorId = 1; // Initial value
int sensorCount = 4;
// Time constants
const long greenDelay = 10000; // 10 sec
const long yellowDelay = 4000; // 4 sec
// Sensor Pins
int sensorPin[4] = {A0, A1, A2, A3};
// Shift Register (SHR) control pins
int SER = 2;
int RST = 3;
int inClk = 4;
int outClk = 5;

// Function to initialize the sensor pins



void init_Port() {
pinMode(sensorPin[0], INPUT);
pinMode(sensorPin[1], INPUT);
pinMode(sensorPin[2], INPUT);
pinMode(sensorPin[3], INPUT);
}
// Function to initialize the LED lights and shift register
void init_Light() {
pinMode(SER, OUTPUT);
pinMode(RST, OUTPUT);
pinMode(inClk, OUTPUT);
pinMode(outClk, OUTPUT);
// Set initial pin states to LOW
digitalWrite(SER, LOW);
digitalWrite(RST, LOW);
digitalWrite(inClk, LOW);
digitalWrite(outClk, LOW);
delay(500);
// Generate a pulse on inClk and outClk pins for initialization
digitalWrite(inClk, HIGH);
delay(10);
digitalWrite(outClk, HIGH);
delay(10);

 digitalWrite(inClk, LOW);
NOP;
digitalWrite(outClk, LOW);
digitalWrite(RST, HIGH);
}
// Function to write LED pattern to the shift register
void write_LED(byte val1, byte val2) {
digitalWrite(outClk, LOW);
NOP;
digitalWrite(inClk, LOW);
NOP;
// Shift out the values to the shift register
shiftOut(SER, inClk, MSBFIRST, val2);
shiftOut(SER, inClk, MSBFIRST, val1);
NOP;
digitalWrite(outClk, HIGH);
NOP;
NOP;
NOP;
digitalWrite(outClk, LOW);
NOP;
digitalWrite(inClk, LOW);
NOP;
}
 // Function to display the current LED signal pattern
void displaySignal() {
write_LED(byte(pattern & 0xFF), byte(pattern >> 8));
}
// Function to update the signal from green to yellow
void green2yellowUpdate() {
unsigned int musk_presentSensorId;
unsigned int musk_nextSensorId;
pattern = 0b0001000100010001; // Default make all red then change
musk_presentSensorId = maskPattern[presentSensorId];
musk_nextSensorId = maskPattern[nextSensorId];
pattern = pattern & musk_presentSensorId;
pattern = pattern | (0b0100 << presentSensorId * 4); // Load yellow pattern
pattern = pattern & musk_nextSensorId;
pattern = pattern | (0b0100 << nextSensorId * 4); // Load yellow pattern
}
// Function to update the signal from yellow to green
void yellow2greenUpdate() {
unsigned int musk_nextSensorId;
pattern = 0b0001000100010001; // Default make all red then change
musk_nextSensorId = maskPattern[nextSensorId];
pattern = pattern & musk_nextSensorId;
pattern = pattern | (0b0010 << nextSensorId * 4); // Load green pattern
}

}
}
// Function to update the current sensor ID based on road occupancy
void sensorIdUpdate() {
int I;
int busyFlag = 0; // Reset value
// Check the sensors after the current sensor
for (I = presentSensorId; I < sensorCount; I++) {
if ((I != presentSensorId) && (digitalRead(sensorPin[I]) == LOW)) {
nextSensorId = I;
busyFlag = 1;
break;// If no busy road found after the current sensor, check the sensors before the current sensor
if (busyFlag == 0) {
for (I = 0; I < presentSensorId; I++) {
if ((I != presentSensorId) && (digitalRead(sensorPin[I]) == LOW)) {
nextSensorId = I;
busyFlag = 1;
break;
}
}
}
// If no road is busy, regular update by incrementing the current sensor ID
if (busyFlag == 0) {
nextSensorId = (presentSensorId + 1) % sensorCount;
}
}
void setup() {
Serial.begin(9600);
Serial.println(" ------- Automatic Traffic Light Control based on Density --------");
// Initialize the sensor pins
init_Port();
// Initialize the LED lights and shift register
init_Light();
}
void loop() {
// Display the current LED signal pattern
displaySignal();
// Delay for the green signal duration
delay(greenDelay);  // Update the sensor ID based on road occupancy
sensorIdUpdate();
// Update the signal from green to yellow
green2yellowUpdate();
// Display the updated LED signal pattern
displaySignal();
// Delay for the yellow signal duration
delay(yellowDelay);
// Update the signal from yellow to green
yellow2greenUpdate();
// Update the present sensor ID
presentSensorId = nextSensorId;
// Update the sensor ID for the next iteration
sensorIdUpdate();
}








